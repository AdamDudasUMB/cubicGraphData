#package import
import pandas
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import shap


#30 VERTEX CUBIC GRAPHS

#data reading and preprocessing

df = pandas.read_csv("30_vertex_cubic.csv", sep= ";")
df = df.dropna()

print("Data without NaN:")
print(df)

#X = features, y = classes

X = df.drop(["class"], axis = 1)
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=44)

#Random forest training and fitting

rf_model = RandomForestClassifier(n_estimators=500)
rf_model.fit(X_train, y_train)

#Evaluation of the forest

y_pred_test = rf_model.predict(X_test)

print()
print("Confustion matrix:")
print()
print(confusion_matrix(y_test, y_pred_test))
print()

print("Whole test:")
print(classification_report(y_test, y_pred_test))
print()

#Interpretation of the decision making

print("Explanation:")

explainer = shap.Explainer(rf_model.predict, X_test)
shap_values = explainer(X_test)

shap.plots.beeswarm(shap_values)

#32 VERTEX CUBIC GRAPHS

#data reading and preprocessing

df = pandas.read_csv("32_vertex_cubic.csv", sep= ";")
df = df.dropna()

print("Data without NaN:")
print(df)

#X = features, y = classes

X = df.drop(["class"], axis = 1)
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=44)

#Random forest training and fitting

rf_model = RandomForestClassifier(n_estimators=500)
rf_model.fit(X_train, y_train)

#Evaluation of the forest

y_pred_test = rf_model.predict(X_test)

print()
print("Confustion matrix:")
print()
print(confusion_matrix(y_test, y_pred_test))
print()

print("Whole test:")
print(classification_report(y_test, y_pred_test))
print()

#Interpretation of the decision making

print("Explanation:")

explainer = shap.Explainer(rf_model.predict, X_test)
shap_values = explainer(X_test)

shap.plots.beeswarm(shap_values)

#34 VERTEX CUBIC GRAPHS

#data reading and preprocessing

df = pandas.read_csv("34_vertex_cubic.csv", sep= ";")
df = df.dropna()

print("Data without NaN:")
print(df)

#X = features, y = classes

X = df.drop(["class"], axis = 1)
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=44)

#Random forest training and fitting

rf_model = RandomForestClassifier(n_estimators=500)
rf_model.fit(X_train, y_train)

#Evaluation of the forest

y_pred_test = rf_model.predict(X_test)

print()
print("Confustion matrix:")
print()
print(confusion_matrix(y_test, y_pred_test))
print()

print("Whole test:")
print(classification_report(y_test, y_pred_test))
print()

#Interpretation of the decision making

print("Explanation:")

explainer = shap.Explainer(rf_model.predict, X_test)
shap_values = explainer(X_test)

shap.plots.beeswarm(shap_values)

#36 VERTEX CUBIC GRAPHS

#data reading and preprocessing

df = pandas.read_csv("36_vertex_cubic.csv", sep= ";")
df = df.dropna()

print("Data without NaN:")
print(df)

#X = features, y = classes

X = df.drop(["class"], axis = 1)
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=44)

#Random forest training and fitting

rf_model = RandomForestClassifier(n_estimators=500)
rf_model.fit(X_train, y_train)

#Evaluation of the forest

y_pred_test = rf_model.predict(X_test)

print()
print("Confustion matrix:")
print()
print(confusion_matrix(y_test, y_pred_test))
print()

print("Whole test:")
print(classification_report(y_test, y_pred_test))
print()

#Interpretation of the decision making

print("Explanation:")

explainer = shap.Explainer(rf_model.predict, X_test)
shap_values = explainer(X_test)

shap.plots.beeswarm(shap_values)
